Now , this workflow runs manually ,
but why we even need this?

🚀let's first see example , how we write this

name: Manual Trigger  # Name of the workflow as shown in GitHub UI

on:
  workflow_dispatch:  # Enables manual trigger
    inputs:           # Optional inputs to the workflow
      environment:
        description: 'Choose environment'
        required: true
        default: 'staging'


this part set the variable which we will choose when we manually run the workflow
here we have no on: section and we write workflow_dispatch th   is is syntax difference.
as this will not run on any github event .

there can be many other properties of variable which we can set 

now jobs section:
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploying to ${{ github.event.inputs.environment }}"


it is like other YAML file but just showing how to access our input variable value


🤔now the question comes , where we even use this manual trigger ?

Let’s say you have a deployment process and you want to manually trigger a deployment to different environments like staging, production, etc.

Instead of:

Committing code just to deploy,

Or writing separate workflows,

You use this one manual trigger workflow where you select the environment from a dropdown when triggering it.
so Manually deploy your app to either environment on demand (not on every push),

Great, right!


✅now let me give you example for 

Use Case: Manual Deployment to Different Environments
📘 Scenario:
You're working on a web application. You have:

A staging environment for testing,

A production environment for live users.

You want to:

Manually deploy your app to either environment on demand (not on every push),

Choose the environment from a dropdown before triggering the deployment.

🛠️ How it works with workflow_dispatch:
1. Workflow File (.github/workflows/deploy.yml)

name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Show environment
        run: echo "Deploying to ${{ github.event.inputs.environment }}"

      - name: Run deployment script
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "Running production deployment..."
            # ./deploy-prod.sh
          else
            echo "Running staging deployment..."
            # ./deploy-staging.sh
          fi


🖱️ Triggering the Workflow
In GitHub:

Go to Actions → Manual Deploy.
Click "Run workflow".
Select staging or production.
Click Run.

The workflow then:

Checks out the code,
Echoes the chosen environment,
Runs a deployment script accordingly (you could replace those echo lines with real deployment logic


💡 Real Life Example
Let’s say you have two separate servers:
staging.myapp.com
prod.myapp.com

You can build scripts like:

deploy-staging.sh: Deploys your app to staging server
deploy-prod.sh: Deploys to production server

And this workflow gives me or my team control over when and where deployments happen — no accidental production updates!

I find it great! 
I feel excited knowing this things , like how everything happens in real Scenario 😁😁

Now , after this i had quesion like now how it identifies the environment ,is it related to something specific!
but if we see above code , i think it is not specific like in option you give server1 option server2 option and than in job chec is server1 than run production scriptif server2 than run stagin script
right...
but at that time i dont think of this
and come to know interesting things ,

so listing down here again , at the end i want to know everything😉😉

✅ 1. Inputs as “environment” (Manual Dropdown – what we’ve used so far)
This is not a real GitHub Environment but just a name passed as input. You use it like this:
workflow_dispatch:
  inputs:
    environment:
      description: 'Choose environment'
      required: true
      default: 'staging'

When you manually trigger the workflow, GitHub shows a dropdown where you select an environment like staging or production.
Then you use this value with:${{ github.event.inputs.environment }}
This method is simple and doesn't use GitHub's actual Environment features like approvals, secrets, etc.

so this is what i explained before that it is not specific and related !
nothing more , I just gave extra explanation which is at the end same which i said before!😅😅



Now this second topic is interesting

because it is something new we will know!😁
and we have to learn this , that how to setup this in our project
but this is limited , I think I have to see video that how it actually works 
✅ 2. GitHub Environments (with secrets, rules, approvals)
GitHub also allows you to define real deployment environments in your repository settings with features like:

Environment-specific secrets
Required review approvals
Protected branch rules
Deployment history tracking

✍️ How to Set Up:
Go to your GitHub repo → Settings → Environments.
Click “New environment”.
Name it staging, production, etc.
(Optional) Add secrets, reviewers, or rules.

🛠️ Using it in Workflow:
You then assign jobs to that environment like this:
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}

✳️ When to Use Each
Type	            Use case
inputs.environment	When you just need a simple dropdown or conditional logic
environment:        in job	When you need real GitHub environment features like secrets, rules


on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        type: choice
        options: [staging, production]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - run: echo "Deploying to ${{ github.event.inputs.environment }}"


so as you see condition is removed !

but after this I was confused that what is difference which i overlooked but after this clarification I got that
although from above it's explanatory but I'm just dumb ! so I need to ask question and I get answer than I realise that it was already saying that 😅🤣

so here is explanation , in casee while reading i didn’t get in future😉. I am always prepared !😁😁

🔍 My Question:
If I set up an environment using GitHub's Environment settings (the 2nd method), do I still need to choose from a dropdown?
So dumb right !🤣

✅ Answer:
Yes, you still need to choose which environment to deploy to, but:

The dropdown (from workflow_dispatch → inputs) lets you manually select which environment to use during the trigger. and based on condition we run some scripts.
The environment: block in your job connects that selected value to GitHub’s actual Environment configuration — enabling extra features like secrets, protection rules, and approvals.

💡 Think of it Like This:
🌐 workflow_dispatch input:
Just a way to manually choose a value like staging or production.

🔐 environment: block:
Tells GitHub, "Hey, I'm deploying to a real environment you configured in repo settings."

They work together like this:

✅ Example Flow:
1. You define staging and production environments under Repo → Settings → Environments.
2.You define this workflow:

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment'
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - run: echo "Deploying to ${{ github.event.inputs.environment }}"


3.You go to GitHub → Actions → this workflow → Click “Run workflow”

4.You get a dropdown (thanks to the input) to choose staging or production.

5.Based on your choice:

GitHub uses the right environment.
Applies any secrets or rules you configured.
Runs the deployment.


🔐 Bonus: What You Get with GitHub Environments
When you use environment: name in your job:

You can use environment-specific secrets
You can add required reviewers before deploy
You get deployment history
You can prevent direct deployments to production without approval



Now, Tulsi why you have given same example , give somthing using secrets right since you have created env 

here's the example , I knew you will ask it!😉`

let's stop here  , First let me test it,
I will add further documentation in next commit !

okay so i have tested it now lets go with this env setup and make it work
i am creting new file for that workflow 

now,

✅ Goal:
Let’s say we want to use a different API key for:

staging
production

We’ll store each key securely in GitHub’s Environment secrets, and use them in our workflow based on what environment was selected.

🪄 Step 1: Define Environments in GitHub
Go to your repo → Settings → Environments

Click New environment
Create one for staging and one for production

For each:

Click into the environment
Add a secret, like:
API_KEY → "staging-key-123" (for staging)
API_KEY → "prod-key-456" (for production)

and refere manual_deployment.yaml file

🔐 What Happens:
When you manually run the workflow, you’ll select an environment (staging or production)

The job picks the right environment-specific secret: API_KEY
GitHub injects the correct value from that environment





